name: Deploy to PlanetHoster

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Récupérer le code source
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Afficher l'IP publique utilisée par GitHub Actions
      - name: Display Public IP
        run: |
          echo "Adresse IP publique utilisée par GitHub Actions :"
          curl ifconfig.me

      # 3. Configurer la clé SSH et l'hôte distant
      - name: Setup SSH Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
        run: |
          # Créer le répertoire .ssh
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Ajouter la clé privée
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Ajouter l'hôte distant aux hôtes connus
          ssh-keyscan -p $REMOTE_PORT $REMOTE_HOST >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # 4. Vérifier la clé privée
      - name: Vérifier la clé privée
        run: |
          echo "Vérification de la clé privée :"
          head -n 5 ~/.ssh/id_rsa  # Affiche les 5 premières lignes masquées
          ls -l ~/.ssh/id_rsa     # Vérifie la taille et les permissions

      # 5. Tester la connexion SSH
      - name: Test SSH Connection
        run: |
          ssh -p ${{ secrets.REMOTE_PORT }} -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "echo 'Connexion réussie !'"

      # 6. Construire le projet
      - name: Install Dependencies and Build
        run: |
          npm install
          npm run build

      # 7. Créer un fichier server.js et modifier package.json
      - name: Create server.js and Update package.json
        run: |
          mkdir -p .output/server
          echo "import('./index.mjs')" > .output/server/server.js
          jq '.type="commonjs"' .output/server/package.json > .output/server/package_tmp.json && mv .output/server/package_tmp.json .output/server/package.json

      # 8. Préparer le serveur distant
      - name: Préparer répertoire distant
        run: |
          ssh -p ${{ secrets.REMOTE_PORT }} -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            mkdir -p /home/uwdbxycj/portfolio
            rm -rf /home/uwdbxycj/portfolio/*
          EOF

      # 9. Déployer avec rsync
      - name: Deploy Build to Server
        run: |
          rsync -avz --delete -e "ssh -p ${{ secrets.REMOTE_PORT }} -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" ./.output/ ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/uwdbxycj/portfolio/

      # 10. Vérifier si le déploiement est réussi
      - name: Verify Deployment
        run: |
          ssh -p ${{ secrets.REMOTE_PORT }} -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            if [ -f /home/uwdbxycj/portfolio/server/server.js ]; then
              echo "server.js exists"
            else
              echo "server.js is missing!"
              exit 1
            fi
          EOF
